plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.ajoberstar.grgit' version '5.2.2'
}

group = 'nyj001012'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

configurations {
    asciidoctorExt
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'io.rest-assured:rest-assured:5.3.0'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

bootJar {
    dependsOn asciidoctor
    copy {
        from "${asciidoctor.outputDir}"
        into "BOOT-INF/classes/static/docs"
    }
}

tasks.register('copyDocs', Copy) {
    dependsOn asciidoctor
    from file('build/docs/asciidoc')
    into file('src/main/resources/static/docs')
}

def wikiRepository = 'https://github.com/nyj001012/ER_BAL/wiki.git'

tasks.register('deployAPIDocs', Exec) {
    commandLine 'git', 'init'
    workingDir 'build/api-docs'
    doLast {
        exec {
            // 먼저 브랜치가 존재하는지 확인 후, 존재하면 체크아웃만 수행
            commandLine 'git', 'checkout', 'deploy'
            ignoreExitValue = true
        }
        exec {
            // 브랜치가 존재하지 않으면 새로 생성
            commandLine 'git', 'checkout', '-b', 'deploy'
            ignoreExitValue = true
        }
        exec {
            commandLine 'git', 'remote', 'remove', 'origin'
            ignoreExitValue = true
        }
        exec {
            commandLine 'git', 'remote', 'add', 'origin', wikiRepository
        }
        exec {
            commandLine 'git', 'add', '.'
        }
        exec {
            commandLine 'git', 'commit', '-m', "docs: Update API docs"
            ignoreExitValue = true // 변경 사항이 없으면 오류 무시
        }
        exec {
            commandLine 'git', 'push', '-f', 'origin', 'deploy'
            ignoreExitValue = true
        }
    }
}

build {
    dependsOn 'copyDocs'
    dependsOn 'deployAPIDocs'
}
