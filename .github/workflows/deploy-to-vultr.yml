name: Deploy to Vultr

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
  push:
    branches:
      - deploy  # 'deploy' 브랜치에 푸시될 때만 실행

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. GitHub 레포지토리 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. SSH 키 설정 (GitHub Secrets에 저장된 SSH_PRIVATE_KEY를 사용)
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 3. SSH 키를 known_host에 추가
      - name: Add known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VULTR_IP }} >> ~/.ssh/known_hosts

      # 4. .env 파일 생성
      - name: Create .env file locally
        run: |
          cat <<EOF > .env
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}

          API_URL=${{ secrets.API_URL }}

          # DATADOG
          DD_API_KEY=${{ secrets.DD_API_KEY }}
          DD_SITE=${{ secrets.DD_SITE }}
          DD_LOGS_ENABLED=true
          DD_APM_ENABLED=true
          DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
          EOF

      # 5. 데이터베이스의 데이터를 저장할 data 디렉터리 생성
      - name: Make data directory
        run: |
          mkdir -p ./database/data

      # 6. 서버에 코드 복사 (scp 명령어로 서버로 코드 전송)
      - name: Copy files to Vultr server
        run: |
          scp -o StrictHostKeyChecking=no -r ./ ubuntu@${{ secrets.VULTR_IP }}:/home/ubuntu/ER_BAL

      # 7. Vultr 서버에 접속하여 docker-compose 실행
      - name: Run docker-compose on Vultr server
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.VULTR_IP }} << 'EOF'
            cd /home/ubuntu/ER_BAL
            docker-compose pull  # 새로 업데이트된 이미지를 받음
            docker-compose up -d  # 백그라운드에서 컨테이너 실행
          EOF

